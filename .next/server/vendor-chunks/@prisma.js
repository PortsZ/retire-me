"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@prisma";
exports.ids = ["vendor-chunks/@prisma"];
exports.modules = {

/***/ "(rsc)/./node_modules/@prisma/driver-adapter-utils/node_modules/@prisma/debug/dist/index.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@prisma/driver-adapter-utils/node_modules/@prisma/debug/dist/index.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Debug: () => Debug,\n  clearLogs: () => clearLogs,\n  default: () => src_default,\n  getLogs: () => getLogs\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// ../../node_modules/.pnpm/kleur@4.1.5/node_modules/kleur/colors.mjs\nvar colors_exports = {};\n__export(colors_exports, {\n  $: () => $,\n  bgBlack: () => bgBlack,\n  bgBlue: () => bgBlue,\n  bgCyan: () => bgCyan,\n  bgGreen: () => bgGreen,\n  bgMagenta: () => bgMagenta,\n  bgRed: () => bgRed,\n  bgWhite: () => bgWhite,\n  bgYellow: () => bgYellow,\n  black: () => black,\n  blue: () => blue,\n  bold: () => bold,\n  cyan: () => cyan,\n  dim: () => dim,\n  gray: () => gray,\n  green: () => green,\n  grey: () => grey,\n  hidden: () => hidden,\n  inverse: () => inverse,\n  italic: () => italic,\n  magenta: () => magenta,\n  red: () => red,\n  reset: () => reset,\n  strikethrough: () => strikethrough,\n  underline: () => underline,\n  white: () => white,\n  yellow: () => yellow\n});\nvar FORCE_COLOR;\nvar NODE_DISABLE_COLORS;\nvar NO_COLOR;\nvar TERM;\nvar isTTY = true;\nif (typeof process !== \"undefined\") {\n  ({ FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM } = process.env || {});\n  isTTY = process.stdout && process.stdout.isTTY;\n}\nvar $ = {\n  enabled: !NODE_DISABLE_COLORS && NO_COLOR == null && TERM !== \"dumb\" && (FORCE_COLOR != null && FORCE_COLOR !== \"0\" || isTTY)\n};\nfunction init(x, y) {\n  let rgx = new RegExp(`\\\\x1b\\\\[${y}m`, \"g\");\n  let open = `\\x1B[${x}m`, close = `\\x1B[${y}m`;\n  return function(txt) {\n    if (!$.enabled || txt == null) return txt;\n    return open + (!!~(\"\" + txt).indexOf(close) ? txt.replace(rgx, close + open) : txt) + close;\n  };\n}\nvar reset = init(0, 0);\nvar bold = init(1, 22);\nvar dim = init(2, 22);\nvar italic = init(3, 23);\nvar underline = init(4, 24);\nvar inverse = init(7, 27);\nvar hidden = init(8, 28);\nvar strikethrough = init(9, 29);\nvar black = init(30, 39);\nvar red = init(31, 39);\nvar green = init(32, 39);\nvar yellow = init(33, 39);\nvar blue = init(34, 39);\nvar magenta = init(35, 39);\nvar cyan = init(36, 39);\nvar white = init(37, 39);\nvar gray = init(90, 39);\nvar grey = init(90, 39);\nvar bgBlack = init(40, 49);\nvar bgRed = init(41, 49);\nvar bgGreen = init(42, 49);\nvar bgYellow = init(43, 49);\nvar bgBlue = init(44, 49);\nvar bgMagenta = init(45, 49);\nvar bgCyan = init(46, 49);\nvar bgWhite = init(47, 49);\n\n// src/index.ts\nvar MAX_ARGS_HISTORY = 100;\nvar COLORS = [\"green\", \"yellow\", \"blue\", \"magenta\", \"cyan\", \"red\"];\nvar argsHistory = [];\nvar lastTimestamp = Date.now();\nvar lastColor = 0;\nvar processEnv = typeof process !== \"undefined\" ? process.env : {};\nglobalThis.DEBUG ?? (globalThis.DEBUG = processEnv.DEBUG ?? \"\");\nglobalThis.DEBUG_COLORS ?? (globalThis.DEBUG_COLORS = processEnv.DEBUG_COLORS ? processEnv.DEBUG_COLORS === \"true\" : true);\nvar topProps = {\n  enable(namespace) {\n    if (typeof namespace === \"string\") {\n      globalThis.DEBUG = namespace;\n    }\n  },\n  disable() {\n    const prev = globalThis.DEBUG;\n    globalThis.DEBUG = \"\";\n    return prev;\n  },\n  // this is the core logic to check if logging should happen or not\n  enabled(namespace) {\n    const listenedNamespaces = globalThis.DEBUG.split(\",\").map((s) => {\n      return s.replace(/[.+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n    });\n    const isListened = listenedNamespaces.some((listenedNamespace) => {\n      if (listenedNamespace === \"\" || listenedNamespace[0] === \"-\") return false;\n      return namespace.match(RegExp(listenedNamespace.split(\"*\").join(\".*\") + \"$\"));\n    });\n    const isExcluded = listenedNamespaces.some((listenedNamespace) => {\n      if (listenedNamespace === \"\" || listenedNamespace[0] !== \"-\") return false;\n      return namespace.match(RegExp(listenedNamespace.slice(1).split(\"*\").join(\".*\") + \"$\"));\n    });\n    return isListened && !isExcluded;\n  },\n  log: (...args) => {\n    const [namespace, format, ...rest] = args;\n    let logger;\n    if ( true && typeof process !== \"undefined\" && typeof process.stderr !== \"undefined\" && typeof process.stderr.write === \"function\") {\n      logger = (...args2) => {\n        try {\n          const util = __webpack_require__(/*! util */ \"util\");\n          process.stderr.write(util.format(...args2) + \"\\n\");\n        } catch (e) {\n          logger = console.warn ?? console.log;\n        }\n      };\n    } else {\n      logger = console.warn ?? console.log;\n    }\n    logger(`${namespace} ${format}`, ...rest);\n  },\n  formatters: {}\n  // not implemented\n};\nfunction debugCreate(namespace) {\n  const instanceProps = {\n    color: COLORS[lastColor++ % COLORS.length],\n    enabled: topProps.enabled(namespace),\n    namespace,\n    log: topProps.log,\n    extend: () => {\n    }\n    // not implemented\n  };\n  const debugCall = (...args) => {\n    const { enabled, namespace: namespace2, color, log } = instanceProps;\n    if (args.length !== 0) {\n      argsHistory.push([namespace2, ...args]);\n    }\n    if (argsHistory.length > MAX_ARGS_HISTORY) {\n      argsHistory.shift();\n    }\n    if (topProps.enabled(namespace2) || enabled) {\n      const stringArgs = args.map((arg) => {\n        if (typeof arg === \"string\") {\n          return arg;\n        }\n        return safeStringify(arg);\n      });\n      const ms = `+${Date.now() - lastTimestamp}ms`;\n      lastTimestamp = Date.now();\n      if (globalThis.DEBUG_COLORS) {\n        log(colors_exports[color](bold(namespace2)), ...stringArgs, colors_exports[color](ms));\n      } else {\n        log(namespace2, ...stringArgs, ms);\n      }\n    }\n  };\n  return new Proxy(debugCall, {\n    get: (_, prop) => instanceProps[prop],\n    set: (_, prop, value) => instanceProps[prop] = value\n  });\n}\nvar Debug = new Proxy(debugCreate, {\n  get: (_, prop) => topProps[prop],\n  set: (_, prop, value) => topProps[prop] = value\n});\nfunction safeStringify(value, indent = 2) {\n  const cache = /* @__PURE__ */ new Set();\n  return JSON.stringify(\n    value,\n    (key, value2) => {\n      if (typeof value2 === \"object\" && value2 !== null) {\n        if (cache.has(value2)) {\n          return `[Circular *]`;\n        }\n        cache.add(value2);\n      } else if (typeof value2 === \"bigint\") {\n        return value2.toString();\n      }\n      return value2;\n    },\n    indent\n  );\n}\nfunction getLogs(numChars = 7500) {\n  const logs = argsHistory.map(([namespace, ...args]) => {\n    return `${namespace} ${args.map((arg) => {\n      if (typeof arg === \"string\") {\n        return arg;\n      } else {\n        return JSON.stringify(arg);\n      }\n    }).join(\" \")}`;\n  }).join(\"\\n\");\n  if (logs.length < numChars) {\n    return logs;\n  }\n  return logs.slice(-numChars);\n}\nfunction clearLogs() {\n  argsHistory.length = 0;\n}\nvar src_default = Debug;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@prisma/driver-adapter-utils/node_modules/@prisma/debug/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@prisma/adapter-libsql/dist/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@prisma/adapter-libsql/dist/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PrismaLibSQL: () => (/* binding */ PrismaLibSQL)\n/* harmony export */ });\n/* harmony import */ var _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @prisma/driver-adapter-utils */ \"(rsc)/./node_modules/@prisma/driver-adapter-utils/node_modules/@prisma/debug/dist/index.js\");\n/* harmony import */ var _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @prisma/driver-adapter-utils */ \"(rsc)/./node_modules/@prisma/driver-adapter-utils/dist/index.mjs\");\n/* harmony import */ var async_mutex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! async-mutex */ \"(rsc)/./node_modules/async-mutex/index.mjs\");\n// src/libsql.ts\n\n\n\n// package.json\nvar name = \"@prisma/adapter-libsql\";\n\n// src/conversion.ts\n\nvar debug = (0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_1__.Debug)(\"prisma:driver-adapter:libsql:conversion\");\nfunction mapDeclType(declType) {\n  switch (declType.toUpperCase()) {\n    case \"\":\n      return null;\n    case \"DECIMAL\":\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Numeric;\n    case \"FLOAT\":\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Float;\n    case \"DOUBLE\":\n    case \"DOUBLE PRECISION\":\n    case \"NUMERIC\":\n    case \"REAL\":\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Double;\n    case \"TINYINT\":\n    case \"SMALLINT\":\n    case \"MEDIUMINT\":\n    case \"INT\":\n    case \"INTEGER\":\n    case \"SERIAL\":\n    case \"INT2\":\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Int32;\n    case \"BIGINT\":\n    case \"UNSIGNED BIG INT\":\n    case \"INT8\":\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Int64;\n    case \"DATETIME\":\n    case \"TIMESTAMP\":\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.DateTime;\n    case \"TIME\":\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Time;\n    case \"DATE\":\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Date;\n    case \"TEXT\":\n    case \"CLOB\":\n    case \"CHARACTER\":\n    case \"VARCHAR\":\n    case \"VARYING CHARACTER\":\n    case \"NCHAR\":\n    case \"NATIVE CHARACTER\":\n    case \"NVARCHAR\":\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Text;\n    case \"BLOB\":\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Bytes;\n    case \"BOOLEAN\":\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Boolean;\n    default:\n      debug(\"unknown decltype:\", declType);\n      return null;\n  }\n}\nfunction mapDeclaredColumnTypes(columntTypes) {\n  const emptyIndices = /* @__PURE__ */ new Set();\n  const result = columntTypes.map((typeName, index) => {\n    const mappedType = mapDeclType(typeName);\n    if (mappedType === null) {\n      emptyIndices.add(index);\n    }\n    return mappedType;\n  });\n  return [result, emptyIndices];\n}\nfunction getColumnTypes(declaredTypes, rows) {\n  const [columnTypes, emptyIndices] = mapDeclaredColumnTypes(declaredTypes);\n  if (emptyIndices.size === 0) {\n    return columnTypes;\n  }\n  columnLoop: for (const columnIndex of emptyIndices) {\n    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n      const candidateValue = rows[rowIndex][columnIndex];\n      if (candidateValue !== null) {\n        columnTypes[columnIndex] = inferColumnType(candidateValue);\n        continue columnLoop;\n      }\n    }\n    columnTypes[columnIndex] = _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Int32;\n  }\n  return columnTypes;\n}\nfunction inferColumnType(value) {\n  switch (typeof value) {\n    case \"string\":\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Text;\n    case \"bigint\":\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Int64;\n    case \"boolean\":\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Boolean;\n    case \"number\":\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.UnknownNumber;\n    case \"object\":\n      return inferObjectType(value);\n    default:\n      throw new UnexpectedTypeError(value);\n  }\n}\nfunction inferObjectType(value) {\n  if (value instanceof ArrayBuffer) {\n    return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Bytes;\n  }\n  throw new UnexpectedTypeError(value);\n}\nvar UnexpectedTypeError = class extends Error {\n  constructor(value) {\n    const type = typeof value;\n    const repr = type === \"object\" ? JSON.stringify(value) : String(value);\n    super(`unexpected value of type ${type}: ${repr}`);\n    this.name = \"UnexpectedTypeError\";\n  }\n};\nfunction mapRow(row, columnTypes) {\n  const result = Array.from(row);\n  for (let i = 0; i < result.length; i++) {\n    const value = result[i];\n    if (value instanceof ArrayBuffer) {\n      result[i] = Array.from(new Uint8Array(value));\n      continue;\n    }\n    if (typeof value === \"number\" && (columnTypes[i] === _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Int32 || columnTypes[i] === _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Int64) && !Number.isInteger(value)) {\n      result[i] = Math.trunc(value);\n      continue;\n    }\n    if ([\"number\", \"bigint\"].includes(typeof value) && columnTypes[i] === _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.DateTime) {\n      result[i] = new Date(Number(value)).toISOString();\n      continue;\n    }\n    if (typeof value === \"bigint\") {\n      result[i] = value.toString();\n      continue;\n    }\n  }\n  return result;\n}\n\n// src/libsql.ts\nvar debug2 = (0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_1__.Debug)(\"prisma:driver-adapter:libsql\");\nvar LOCK_TAG = Symbol();\nvar _a;\n_a = LOCK_TAG;\nvar LibSqlQueryable = class {\n  constructor(client) {\n    this.client = client;\n    this.provider = \"sqlite\";\n    this.adapterName = name;\n    this[_a] = new async_mutex__WEBPACK_IMPORTED_MODULE_0__.Mutex();\n  }\n  /**\n   * Execute a query given as SQL, interpolating the given parameters.\n   */\n  async queryRaw(query) {\n    const tag = \"[js::query_raw]\";\n    debug2(`${tag} %O`, query);\n    const ioResult = await this.performIO(query);\n    return ioResult.map(({ columns, rows, columnTypes: declaredColumnTypes }) => {\n      const columnTypes = getColumnTypes(declaredColumnTypes, rows);\n      return {\n        columnNames: columns,\n        columnTypes,\n        rows: rows.map((row) => mapRow(row, columnTypes))\n      };\n    });\n  }\n  /**\n   * Execute a query given as SQL, interpolating the given parameters and\n   * returning the number of affected rows.\n   * Note: Queryable expects a u64, but napi.rs only supports u32.\n   */\n  async executeRaw(query) {\n    const tag = \"[js::execute_raw]\";\n    debug2(`${tag} %O`, query);\n    return (await this.performIO(query)).map(({ rowsAffected }) => rowsAffected ?? 0);\n  }\n  /**\n   * Run a query against the database, returning the result set.\n   * Should the query fail due to a connection error, the connection is\n   * marked as unhealthy.\n   */\n  async performIO(query) {\n    const release = await this[LOCK_TAG].acquire();\n    try {\n      const result = await this.client.execute(query);\n      return (0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ok)(result);\n    } catch (e) {\n      const error = e;\n      debug2(\"Error in performIO: %O\", error);\n      const rawCode = error[\"rawCode\"] ?? e.cause?.[\"rawCode\"];\n      if (typeof rawCode === \"number\") {\n        return (0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.err)({\n          kind: \"Sqlite\",\n          extendedCode: rawCode,\n          message: error.message\n        });\n      }\n      throw error;\n    } finally {\n      release();\n    }\n  }\n};\nvar LibSqlTransaction = class extends LibSqlQueryable {\n  constructor(client, options, unlockParent) {\n    super(client);\n    this.options = options;\n    this.unlockParent = unlockParent;\n  }\n  async commit() {\n    debug2(`[js::commit]`);\n    try {\n      await this.client.commit();\n    } finally {\n      this.unlockParent();\n    }\n    return (0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ok)(void 0);\n  }\n  async rollback() {\n    debug2(`[js::rollback]`);\n    try {\n      await this.client.rollback();\n    } catch (error) {\n      debug2(\"error in rollback:\", error);\n    } finally {\n      this.unlockParent();\n    }\n    return (0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ok)(void 0);\n  }\n};\nvar PrismaLibSQL = class extends LibSqlQueryable {\n  constructor(client) {\n    super(client);\n  }\n  async startTransaction() {\n    const options = {\n      usePhantomQuery: true\n    };\n    const tag = \"[js::startTransaction]\";\n    debug2(`${tag} options: %O`, options);\n    const release = await this[LOCK_TAG].acquire();\n    try {\n      const tx = await this.client.transaction(\"deferred\");\n      return (0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ok)(new LibSqlTransaction(tx, options, release));\n    } catch (e) {\n      release();\n      throw e;\n    }\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@prisma/adapter-libsql/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@prisma/driver-adapter-utils/dist/index.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@prisma/driver-adapter-utils/dist/index.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ColumnTypeEnum: () => (/* binding */ ColumnTypeEnum),\n/* harmony export */   Debug: () => (/* reexport safe */ _prisma_debug__WEBPACK_IMPORTED_MODULE_0__.Debug),\n/* harmony export */   JsonNullMarker: () => (/* binding */ JsonNullMarker),\n/* harmony export */   bindAdapter: () => (/* binding */ bindAdapter),\n/* harmony export */   err: () => (/* binding */ err),\n/* harmony export */   ok: () => (/* binding */ ok)\n/* harmony export */ });\n/* harmony import */ var _prisma_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/debug */ \"(rsc)/./node_modules/@prisma/driver-adapter-utils/node_modules/@prisma/debug/dist/index.js\");\n// src/result.ts\nfunction ok(value) {\n  return {\n    ok: true,\n    value,\n    map(fn) {\n      return ok(fn(value));\n    },\n    flatMap(fn) {\n      return fn(value);\n    }\n  };\n}\nfunction err(error) {\n  return {\n    ok: false,\n    error,\n    map() {\n      return err(error);\n    },\n    flatMap() {\n      return err(error);\n    }\n  };\n}\n\n// src/binder.ts\nvar ErrorRegistryInternal = class {\n  constructor() {\n    this.registeredErrors = [];\n  }\n  consumeError(id) {\n    return this.registeredErrors[id];\n  }\n  registerNewError(error) {\n    let i = 0;\n    while (this.registeredErrors[i] !== void 0) {\n      i++;\n    }\n    this.registeredErrors[i] = { error };\n    return i;\n  }\n};\nvar bindAdapter = (adapter) => {\n  const errorRegistry = new ErrorRegistryInternal();\n  const startTransaction = wrapAsync(errorRegistry, adapter.startTransaction.bind(adapter));\n  const boundAdapter = {\n    adapterName: adapter.adapterName,\n    errorRegistry,\n    queryRaw: wrapAsync(errorRegistry, adapter.queryRaw.bind(adapter)),\n    executeRaw: wrapAsync(errorRegistry, adapter.executeRaw.bind(adapter)),\n    provider: adapter.provider,\n    startTransaction: async (...args) => {\n      const result = await startTransaction(...args);\n      return result.map((tx) => bindTransaction(errorRegistry, tx));\n    }\n  };\n  if (adapter.getConnectionInfo) {\n    boundAdapter.getConnectionInfo = wrapSync(errorRegistry, adapter.getConnectionInfo.bind(adapter));\n  }\n  return boundAdapter;\n};\nvar bindTransaction = (errorRegistry, transaction) => {\n  return {\n    adapterName: transaction.adapterName,\n    provider: transaction.provider,\n    options: transaction.options,\n    queryRaw: wrapAsync(errorRegistry, transaction.queryRaw.bind(transaction)),\n    executeRaw: wrapAsync(errorRegistry, transaction.executeRaw.bind(transaction)),\n    commit: wrapAsync(errorRegistry, transaction.commit.bind(transaction)),\n    rollback: wrapAsync(errorRegistry, transaction.rollback.bind(transaction))\n  };\n};\nfunction wrapAsync(registry, fn) {\n  return async (...args) => {\n    try {\n      return await fn(...args);\n    } catch (error) {\n      const id = registry.registerNewError(error);\n      return err({ kind: \"GenericJs\", id });\n    }\n  };\n}\nfunction wrapSync(registry, fn) {\n  return (...args) => {\n    try {\n      return fn(...args);\n    } catch (error) {\n      const id = registry.registerNewError(error);\n      return err({ kind: \"GenericJs\", id });\n    }\n  };\n}\n\n// src/const.ts\nvar ColumnTypeEnum = {\n  // Scalars\n  Int32: 0,\n  Int64: 1,\n  Float: 2,\n  Double: 3,\n  Numeric: 4,\n  Boolean: 5,\n  Character: 6,\n  Text: 7,\n  Date: 8,\n  Time: 9,\n  DateTime: 10,\n  Json: 11,\n  Enum: 12,\n  Bytes: 13,\n  Set: 14,\n  Uuid: 15,\n  // Arrays\n  Int32Array: 64,\n  Int64Array: 65,\n  FloatArray: 66,\n  DoubleArray: 67,\n  NumericArray: 68,\n  BooleanArray: 69,\n  CharacterArray: 70,\n  TextArray: 71,\n  DateArray: 72,\n  TimeArray: 73,\n  DateTimeArray: 74,\n  JsonArray: 75,\n  EnumArray: 76,\n  BytesArray: 77,\n  UuidArray: 78,\n  // Custom\n  UnknownNumber: 128\n};\nvar JsonNullMarker = \"$__prisma_null\";\n\n// src/debug.ts\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHByaXNtYS9kcml2ZXItYWRhcHRlci11dGlscy9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNzQztBQVFwQyIsInNvdXJjZXMiOlsid2VicGFjazovL21lLWFwb3NlbnRhLy4vbm9kZV9tb2R1bGVzL0BwcmlzbWEvZHJpdmVyLWFkYXB0ZXItdXRpbHMvZGlzdC9pbmRleC5tanM/OGJlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvcmVzdWx0LnRzXG5mdW5jdGlvbiBvayh2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIG9rOiB0cnVlLFxuICAgIHZhbHVlLFxuICAgIG1hcChmbikge1xuICAgICAgcmV0dXJuIG9rKGZuKHZhbHVlKSk7XG4gICAgfSxcbiAgICBmbGF0TWFwKGZuKSB7XG4gICAgICByZXR1cm4gZm4odmFsdWUpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGVycihlcnJvcikge1xuICByZXR1cm4ge1xuICAgIG9rOiBmYWxzZSxcbiAgICBlcnJvcixcbiAgICBtYXAoKSB7XG4gICAgICByZXR1cm4gZXJyKGVycm9yKTtcbiAgICB9LFxuICAgIGZsYXRNYXAoKSB7XG4gICAgICByZXR1cm4gZXJyKGVycm9yKTtcbiAgICB9XG4gIH07XG59XG5cbi8vIHNyYy9iaW5kZXIudHNcbnZhciBFcnJvclJlZ2lzdHJ5SW50ZXJuYWwgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucmVnaXN0ZXJlZEVycm9ycyA9IFtdO1xuICB9XG4gIGNvbnN1bWVFcnJvcihpZCkge1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyZWRFcnJvcnNbaWRdO1xuICB9XG4gIHJlZ2lzdGVyTmV3RXJyb3IoZXJyb3IpIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgd2hpbGUgKHRoaXMucmVnaXN0ZXJlZEVycm9yc1tpXSAhPT0gdm9pZCAwKSB7XG4gICAgICBpKys7XG4gICAgfVxuICAgIHRoaXMucmVnaXN0ZXJlZEVycm9yc1tpXSA9IHsgZXJyb3IgfTtcbiAgICByZXR1cm4gaTtcbiAgfVxufTtcbnZhciBiaW5kQWRhcHRlciA9IChhZGFwdGVyKSA9PiB7XG4gIGNvbnN0IGVycm9yUmVnaXN0cnkgPSBuZXcgRXJyb3JSZWdpc3RyeUludGVybmFsKCk7XG4gIGNvbnN0IHN0YXJ0VHJhbnNhY3Rpb24gPSB3cmFwQXN5bmMoZXJyb3JSZWdpc3RyeSwgYWRhcHRlci5zdGFydFRyYW5zYWN0aW9uLmJpbmQoYWRhcHRlcikpO1xuICBjb25zdCBib3VuZEFkYXB0ZXIgPSB7XG4gICAgYWRhcHRlck5hbWU6IGFkYXB0ZXIuYWRhcHRlck5hbWUsXG4gICAgZXJyb3JSZWdpc3RyeSxcbiAgICBxdWVyeVJhdzogd3JhcEFzeW5jKGVycm9yUmVnaXN0cnksIGFkYXB0ZXIucXVlcnlSYXcuYmluZChhZGFwdGVyKSksXG4gICAgZXhlY3V0ZVJhdzogd3JhcEFzeW5jKGVycm9yUmVnaXN0cnksIGFkYXB0ZXIuZXhlY3V0ZVJhdy5iaW5kKGFkYXB0ZXIpKSxcbiAgICBwcm92aWRlcjogYWRhcHRlci5wcm92aWRlcixcbiAgICBzdGFydFRyYW5zYWN0aW9uOiBhc3luYyAoLi4uYXJncykgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3RhcnRUcmFuc2FjdGlvbiguLi5hcmdzKTtcbiAgICAgIHJldHVybiByZXN1bHQubWFwKCh0eCkgPT4gYmluZFRyYW5zYWN0aW9uKGVycm9yUmVnaXN0cnksIHR4KSk7XG4gICAgfVxuICB9O1xuICBpZiAoYWRhcHRlci5nZXRDb25uZWN0aW9uSW5mbykge1xuICAgIGJvdW5kQWRhcHRlci5nZXRDb25uZWN0aW9uSW5mbyA9IHdyYXBTeW5jKGVycm9yUmVnaXN0cnksIGFkYXB0ZXIuZ2V0Q29ubmVjdGlvbkluZm8uYmluZChhZGFwdGVyKSk7XG4gIH1cbiAgcmV0dXJuIGJvdW5kQWRhcHRlcjtcbn07XG52YXIgYmluZFRyYW5zYWN0aW9uID0gKGVycm9yUmVnaXN0cnksIHRyYW5zYWN0aW9uKSA9PiB7XG4gIHJldHVybiB7XG4gICAgYWRhcHRlck5hbWU6IHRyYW5zYWN0aW9uLmFkYXB0ZXJOYW1lLFxuICAgIHByb3ZpZGVyOiB0cmFuc2FjdGlvbi5wcm92aWRlcixcbiAgICBvcHRpb25zOiB0cmFuc2FjdGlvbi5vcHRpb25zLFxuICAgIHF1ZXJ5UmF3OiB3cmFwQXN5bmMoZXJyb3JSZWdpc3RyeSwgdHJhbnNhY3Rpb24ucXVlcnlSYXcuYmluZCh0cmFuc2FjdGlvbikpLFxuICAgIGV4ZWN1dGVSYXc6IHdyYXBBc3luYyhlcnJvclJlZ2lzdHJ5LCB0cmFuc2FjdGlvbi5leGVjdXRlUmF3LmJpbmQodHJhbnNhY3Rpb24pKSxcbiAgICBjb21taXQ6IHdyYXBBc3luYyhlcnJvclJlZ2lzdHJ5LCB0cmFuc2FjdGlvbi5jb21taXQuYmluZCh0cmFuc2FjdGlvbikpLFxuICAgIHJvbGxiYWNrOiB3cmFwQXN5bmMoZXJyb3JSZWdpc3RyeSwgdHJhbnNhY3Rpb24ucm9sbGJhY2suYmluZCh0cmFuc2FjdGlvbikpXG4gIH07XG59O1xuZnVuY3Rpb24gd3JhcEFzeW5jKHJlZ2lzdHJ5LCBmbikge1xuICByZXR1cm4gYXN5bmMgKC4uLmFyZ3MpID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IGZuKC4uLmFyZ3MpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCBpZCA9IHJlZ2lzdHJ5LnJlZ2lzdGVyTmV3RXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIGVycih7IGtpbmQ6IFwiR2VuZXJpY0pzXCIsIGlkIH0pO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIHdyYXBTeW5jKHJlZ2lzdHJ5LCBmbikge1xuICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZuKC4uLmFyZ3MpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCBpZCA9IHJlZ2lzdHJ5LnJlZ2lzdGVyTmV3RXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIGVycih7IGtpbmQ6IFwiR2VuZXJpY0pzXCIsIGlkIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuLy8gc3JjL2NvbnN0LnRzXG52YXIgQ29sdW1uVHlwZUVudW0gPSB7XG4gIC8vIFNjYWxhcnNcbiAgSW50MzI6IDAsXG4gIEludDY0OiAxLFxuICBGbG9hdDogMixcbiAgRG91YmxlOiAzLFxuICBOdW1lcmljOiA0LFxuICBCb29sZWFuOiA1LFxuICBDaGFyYWN0ZXI6IDYsXG4gIFRleHQ6IDcsXG4gIERhdGU6IDgsXG4gIFRpbWU6IDksXG4gIERhdGVUaW1lOiAxMCxcbiAgSnNvbjogMTEsXG4gIEVudW06IDEyLFxuICBCeXRlczogMTMsXG4gIFNldDogMTQsXG4gIFV1aWQ6IDE1LFxuICAvLyBBcnJheXNcbiAgSW50MzJBcnJheTogNjQsXG4gIEludDY0QXJyYXk6IDY1LFxuICBGbG9hdEFycmF5OiA2NixcbiAgRG91YmxlQXJyYXk6IDY3LFxuICBOdW1lcmljQXJyYXk6IDY4LFxuICBCb29sZWFuQXJyYXk6IDY5LFxuICBDaGFyYWN0ZXJBcnJheTogNzAsXG4gIFRleHRBcnJheTogNzEsXG4gIERhdGVBcnJheTogNzIsXG4gIFRpbWVBcnJheTogNzMsXG4gIERhdGVUaW1lQXJyYXk6IDc0LFxuICBKc29uQXJyYXk6IDc1LFxuICBFbnVtQXJyYXk6IDc2LFxuICBCeXRlc0FycmF5OiA3NyxcbiAgVXVpZEFycmF5OiA3OCxcbiAgLy8gQ3VzdG9tXG4gIFVua25vd25OdW1iZXI6IDEyOFxufTtcbnZhciBKc29uTnVsbE1hcmtlciA9IFwiJF9fcHJpc21hX251bGxcIjtcblxuLy8gc3JjL2RlYnVnLnRzXG5pbXBvcnQgeyBEZWJ1ZyB9IGZyb20gXCJAcHJpc21hL2RlYnVnXCI7XG5leHBvcnQge1xuICBDb2x1bW5UeXBlRW51bSxcbiAgRGVidWcsXG4gIEpzb25OdWxsTWFya2VyLFxuICBiaW5kQWRhcHRlcixcbiAgZXJyLFxuICBva1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@prisma/driver-adapter-utils/dist/index.mjs\n");

/***/ })

};
;